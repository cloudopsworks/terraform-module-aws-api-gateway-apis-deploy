name: Terraform AWS API Gateway REST API Deploy Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-api-gateway-apis-deploy

description: |-
  Terraform module for deploying AWS API Gateway REST APIs with advanced configuration options. This module 
  provides comprehensive management of API Gateway resources including stage deployments, caching strategies, 
  logging configurations, and custom authorization. It supports integration with AWS Lambda authorizers, 
  method-level throttling, and detailed metrics collection. The module is designed to work seamlessly with 
  both Terraform and Terragrunt deployment patterns.

# Introduction to the project
introduction: |-
  This Terraform module simplifies the deployment and management of AWS API Gateway REST APIs. It provides 
  a standardized approach to API Gateway configuration with built-in support for:

  - Multiple stage deployments
  - Cache configuration and management
  - Custom domain names and SSL certificates
  - Method-level throttling and quota limits
  - Integration with AWS Lambda authorizers
  - Detailed CloudWatch logging and metrics
  - Terragrunt-compatible deployment patterns

  The module follows AWS best practices and provides a secure, scalable foundation for API deployments.

# How to use this project
usage: |-
  ## Terraform Usage
  ```hcl
  module "api_gateway" {
    source = "github.com/cloudopsworks/terraform-module-aws-api-gateway-apis-deploy"
    
    aws_configuration = {
      settings = {
        caching_enabled                            = true
        cache_ttl_in_seconds                       = 300
        cache_data_encrypted                       = true
        require_authorization_for_cache_control    = true
        unauthorized_cache_control_header_strategy = "FAIL_WITH_403"
        logging_level                              = "INFO"
        metrics_enabled                            = true
        data_trace_enabled                         = true
        throttling_burst_limit                     = 1000
        throttling_rate_limit                      = 500
      }
      cache_cluster_enabled = true
    }
    
    extra_tags = {
      Environment = "production"
      Project     = "example"
    }
  }
  ```

  ## Terragrunt Usage
  ```hcl
  terraform {
    source = "github.com/cloudopsworks/terraform-module-aws-api-gateway-apis-deploy"
  }
  
  inputs = {
    aws_configuration = {
    settings = {
    caching_enabled                            = true
    cache_ttl_in_seconds                       = 300
    cache_data_encrypted                       = true
    require_authorization_for_cache_control    = true
    unauthorized_cache_control_header_strategy = "FAIL_WITH_403"
    logging_level                              = "INFO"
    metrics_enabled                            = true
    data_trace_enabled                         = true
    throttling_burst_limit                     = 1000
    throttling_rate_limit                      = 500
    }
    cache_cluster_enabled = true
    }
  
  
    extra_tags = {
      Environment = "production"
      Project     = "example"
    }
  }
  ```

# Example usage
examples: |-
  ### Basic API Gateway with Custom Domain
  ```hcl
  module "api_gateway" {
    source = "github.com/cloudopsworks/terraform-module-aws-api-gateway-apis-deploy"

    aws_configuration = {
      settings = {
        name = "my-api"
        domain_name = "api.example.com"
        certificate_arn = "arn:aws:acm:region:account:certificate/xxx"
      }
    }
  }
  ```

  ### Production API with Advanced Caching
  ```hcl
  module "api_gateway" {
    source = "github.com/cloudopsworks/terraform-module-aws-api-gateway-apis-deploy"

    aws_configuration = {
      settings = {
        name = "production-api"
        stage_name = "prod"
        caching_enabled = true
        cache_cluster_size = "0.5"
        cache_ttl_in_seconds = 3600
        cache_data_encrypted = true
      }
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Add the module to your Terraform configuration:
     ```hcl
     module "api_gateway" {
       source = "github.com/cloudopsworks/terraform-module-aws-api-gateway-apis-deploy"

       aws_configuration = {
         settings = {
           name = "my-first-api"
           stage_name = "dev"
           metrics_enabled = true
           logging_level = "INFO"
         }
       }
     }
     ```

  2. Initialize Terraform:
     ```bash
     terraform init
     ```

  3. Apply the configuration:
     ```bash
     terraform plan
     terraform apply
     ```

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"